def taking_repoted_symptoms(self):
    # Symptom Entry Loop
        while True:
            symptom_input = input("\n\nEnter a symptom (or type 'done' to finish): ").strip()
            if symptom_input.lower() == 'done':
                break
            self.reported_symptoms.append(symptom_input)
            print(f"Reported Symptoms: {self.reported_symptoms}")
            suggested_symptoms = UseCasesAlgorithm.find_most_frequent_co_occurring_symptoms(self.reported_symptoms)
            print(f"\npossible co_occurring symptoms{suggested_symptoms}")
        print(f"\nSymptoms recorded: {self.reported_symptoms}")

def giving_diagnosed_disease(self):
    # Diagnosis Entry
    suggested_disease = UseCasesAlgorithm.find_most_possible_disease(self.reported_symptoms)
    print(f"\n\npossible disease:{suggested_disease}")
    self.diagnosed_disease = input("\nEnter diagnosis: ").strip()
    print(f"\nDiagnosis recorded: {self.diagnosed_disease}")


def prescribing_medicines(self):
    # Prescribed Medicines Loop
    suggested_medicines = UseCasesAlgorithm.find_relevant_medicines(self.reported_symptoms,self.diagnosed_disease)
    print(f"\n\npossible relevant medicines:{suggested_medicines}")
    while True:
        medicine_input = input("\nEnter a prescribed medicine (or type 'done' to finish): ").strip()
        if medicine_input.lower() == 'done':
            break
        self.prescribed_medicines.append(medicine_input)
    print(f"\nPrescribed medicines recorded: {self.prescribed_medicines}")

    *******************************

    Ok now, next mow on to next use case (button), that is when user clicks "take next patient":


Objective:
when User clicks the bottom, take next patient, the system start asking user to enter a series of data (one section should be completed to move on the next). First, symptoms, the symptom would display the most common symptoms in the database to user upon click "take next patient". User needs to enter one by on (not all at once), then program would be able to provide most frequent co occurring symptom for the given input symptoms accordingly. Second, diagnose, upon user save (summit) the symptom entering section, the program pop up next section with a list of suggested relevant diseases, and  ask user to enter the diagnose. Last, prescription, upon user save the diagnose, the system pops up another section with a list of suggested medicines and ask user to enter prescriptions.

According to the function and objective above, lest build it one by one, divide the tasks into three phrases below:
1)symptoms
2)diease
3)prescription

Let's develop first, symptom section:
"->" means to call
Main.app -> PatientManagementUI.py -> display "common symptoms of recent patients" -> SymptomUI.APP (start asking symptom inputs)

This was SymptomUI.py you suggersted ealier:
from DiagnoseUI import start_diagnosis_ui
import UserRequest
import tkinter as tk

def start_symptom_ui(app, patient):
    """Start the symptom entry UI."""
    symptom_window = tk.Toplevel(app.root)
    symptom_window.title("Document Diagnosis: Symptoms")

    tk.Label(symptom_window, text=f"Processing Patient: {patient['first_name']} {patient['last_name']}").pack(pady=10)

    common_symptoms = UserRequest.get_common_symptoms()
    tk.Label(symptom_window, text=f"Common Symptoms: {', '.join(common_symptoms)}").pack(pady=10)

    tk.Label(symptom_window, text="Enter Symptoms:").pack()
    symptom_entry = tk.Entry(symptom_window, width=50)
    symptom_entry.pack(pady=5)

    symptom_list = tk.Listbox(symptom_window, height=10, width=50)
    symptom_list.pack(pady=10)

    def add_symptom():
        symptom = symptom_entry.get().strip()
        if symptom:
            symptom_list.insert(tk.END, symptom)
            UserRequest.add_symptom(symptom)
            suggested_symptoms = UserRequest.get_suggested_symptoms()
            app.log_text.insert(tk.END, f"Suggested Symptoms: {', '.join(suggested_symptoms)}\n")
            symptom_entry.delete(0, tk.END)

    def save_symptoms():
        symptom_window.destroy()
        start_diagnosis_ui(app, patient)

    tk.Button(symptom_window, text="Add Symptom", command=add_symptom).pack(pady=5)
    tk.Button(symptom_window, text="Save Symptoms", command=save_symptoms).pack(pady=10)
